const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

// Use the unique id generated by getNextUniqueId to create a file path inside the dataDir

exports.create = (text, callback) => {
  counter.getNextUniqueId(function(err, counter) {
    if (err) {
      console.log('unknown error');
    } else {
      var id = counter;
      items[id] = text;
      //fs.write a new file
      //fs.writeFile(file, data, callback)
      // file name needs to be current `${id}.txt`

      //(path.join(`${exports.dataDir}`,`${id}.txt`))
      fs.writeFile((path.join(`${exports.dataDir}`, `${id}.txt`)), text, function(err, data) {
        if (err) {
          console.log('error writting new file');
        } else {
          callback(null, { id, text });
        }
      });
    }
  });

};

exports.readAll = (callback) => {
  var data = _.map(items, (text, id) => {
    return { id, text };
  });
  callback(null, data);
};

exports.readOne = (id, callback) => {
  var text = items[id];
  if (!text) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback(null, { id, text });
  }
};

exports.update = (id, text, callback) => {
  var item = items[id];
  if (!item) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    items[id] = text;
    callback(null, { id, text });
  }
};

exports.delete = (id, callback) => {
  var item = items[id];
  delete items[id];
  if (!item) {
    // report an error if item not found
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback();
  }
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};


// sub-problem 1: save the current state of the counter to the hard drive, so it's persisted between server restarts
// 1A) rewrite getNextUniqueId to make use of the provided readCounter and writeCounter functions